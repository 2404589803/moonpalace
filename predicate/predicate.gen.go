// Code generated by goyacc -o predicate.gen.go -p predicate predicate.y. DO NOT EDIT.

//line predicate.y:2

package predicate

import __yyfmt__ "fmt"

//line predicate.y:3

//line predicate.y:7
type predicateSymType struct {
	yys       int
	predicate *string
	operator  string
	ident     string
	lit       string
	fields    []string
	expr      string
}

const DOT = 57346
const END = 57347
const GREATER = 57348
const LESS = 57349
const EQUAL = 57350
const NOT = 57351
const LIKE = 57352
const MINUS = 57353
const AND = 57354
const OR = 57355
const IDENT = 57356
const STRING = 57357
const BOOLEAN = 57358
const INTEGER = 57359
const NULL = 57360

var predicateToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"DOT",
	"END",
	"GREATER",
	"LESS",
	"EQUAL",
	"NOT",
	"LIKE",
	"MINUS",
	"AND",
	"OR",
	"IDENT",
	"STRING",
	"BOOLEAN",
	"INTEGER",
	"NULL",
}

var predicateStatenames = [...]string{}

const predicateEofCode = 1
const predicateErrCode = 2
const predicateInitialStackSize = 16

//line predicate.y:130

//line yacctab:1
var predicateExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const predicatePrivate = 57344

const predicateLast = 43

var predicateAct = [...]int8{
	25, 39, 38, 43, 21, 22, 26, 33, 42, 40,
	30, 36, 14, 32, 15, 16, 11, 12, 13, 6,
	24, 5, 20, 19, 18, 35, 8, 9, 34, 28,
	27, 3, 41, 37, 1, 31, 29, 2, 7, 17,
	10, 23, 4,
}

var predicatePact = [...]int16{
	7, -1000, 14, -1000, 8, -1000, -1000, 7, 12, 10,
	-11, 22, 21, -11, -4, 20, 17, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -6, 29, -16, -17, -1000,
	-1000, -1000, -1000, -8, -1000, -1000, 28, -9, -1000, -1000,
	-1000, -14, -1000, -1000,
}

var predicatePgo = [...]int8{
	0, 42, 22, 20, 41, 40, 38, 31, 37, 34,
}

var predicateR1 = [...]int8{
	0, 9, 8, 8, 7, 7, 7, 7, 5, 5,
	5, 5, 5, 5, 6, 6, 2, 2, 2, 3,
	3, 4, 4, 4, 1, 1, 1,
}

var predicateR2 = [...]int8{
	0, 2, 1, 3, 3, 4, 4, 3, 1, 1,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	2, 1, 4, 3, 3, 3, 1,
}

var predicateChk = [...]int16{
	-1000, -9, -8, -7, -1, 14, 5, -6, 12, 13,
	-5, 8, 9, 10, 4, 6, 7, -7, 12, 13,
	-2, 15, 16, -4, -3, 11, 17, 8, 8, -2,
	14, -3, 17, 11, 8, 8, 17, 4, 18, 18,
	17, 4, 17, 17,
}

var predicateDef = [...]int8{
	0, -2, 0, 2, 0, 26, 1, 0, 0, 0,
	0, 0, 0, 0, 0, 8, 9, 3, 14, 15,
	4, 16, 17, 18, 21, 0, 19, 12, 13, 7,
	24, 25, 19, 0, 10, 11, 20, 0, 5, 6,
	20, 0, 23, 22,
}

var predicateTok1 = [...]int8{
	1,
}

var predicateTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18,
}

var predicateTok3 = [...]int8{
	0,
}

var predicateErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	predicateDebug        = 0
	predicateErrorVerbose = false
)

type predicateLexer interface {
	Lex(lval *predicateSymType) int
	Error(s string)
}

type predicateParser interface {
	Parse(predicateLexer) int
	Lookahead() int
}

type predicateParserImpl struct {
	lval  predicateSymType
	stack [predicateInitialStackSize]predicateSymType
	char  int
}

func (p *predicateParserImpl) Lookahead() int {
	return p.char
}

func predicateNewParser() predicateParser {
	return &predicateParserImpl{}
}

const predicateFlag = -1000

func predicateTokname(c int) string {
	if c >= 1 && c-1 < len(predicateToknames) {
		if predicateToknames[c-1] != "" {
			return predicateToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func predicateStatname(s int) string {
	if s >= 0 && s < len(predicateStatenames) {
		if predicateStatenames[s] != "" {
			return predicateStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func predicateErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !predicateErrorVerbose {
		return "syntax error"
	}

	for _, e := range predicateErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + predicateTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(predicatePact[state])
	for tok := TOKSTART; tok-1 < len(predicateToknames); tok++ {
		if n := base + tok; n >= 0 && n < predicateLast && int(predicateChk[int(predicateAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if predicateDef[state] == -2 {
		i := 0
		for predicateExca[i] != -1 || int(predicateExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; predicateExca[i] >= 0; i += 2 {
			tok := int(predicateExca[i])
			if tok < TOKSTART || predicateExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if predicateExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += predicateTokname(tok)
	}
	return res
}

func predicatelex1(lex predicateLexer, lval *predicateSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(predicateTok1[0])
		goto out
	}
	if char < len(predicateTok1) {
		token = int(predicateTok1[char])
		goto out
	}
	if char >= predicatePrivate {
		if char < predicatePrivate+len(predicateTok2) {
			token = int(predicateTok2[char-predicatePrivate])
			goto out
		}
	}
	for i := 0; i < len(predicateTok3); i += 2 {
		token = int(predicateTok3[i+0])
		if token == char {
			token = int(predicateTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(predicateTok2[1]) /* unknown char */
	}
	if predicateDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", predicateTokname(token), uint(char))
	}
	return char, token
}

func predicateParse(predicatelex predicateLexer) int {
	return predicateNewParser().Parse(predicatelex)
}

func (predicatercvr *predicateParserImpl) Parse(predicatelex predicateLexer) int {
	var predicaten int
	var predicateVAL predicateSymType
	var predicateDollar []predicateSymType
	_ = predicateDollar // silence set and not used
	predicateS := predicatercvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	predicatestate := 0
	predicatercvr.char = -1
	predicatetoken := -1 // predicatercvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		predicatestate = -1
		predicatercvr.char = -1
		predicatetoken = -1
	}()
	predicatep := -1
	goto predicatestack

ret0:
	return 0

ret1:
	return 1

predicatestack:
	/* put a state and value onto the stack */
	if predicateDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", predicateTokname(predicatetoken), predicateStatname(predicatestate))
	}

	predicatep++
	if predicatep >= len(predicateS) {
		nyys := make([]predicateSymType, len(predicateS)*2)
		copy(nyys, predicateS)
		predicateS = nyys
	}
	predicateS[predicatep] = predicateVAL
	predicateS[predicatep].yys = predicatestate

predicatenewstate:
	predicaten = int(predicatePact[predicatestate])
	if predicaten <= predicateFlag {
		goto predicatedefault /* simple state */
	}
	if predicatercvr.char < 0 {
		predicatercvr.char, predicatetoken = predicatelex1(predicatelex, &predicatercvr.lval)
	}
	predicaten += predicatetoken
	if predicaten < 0 || predicaten >= predicateLast {
		goto predicatedefault
	}
	predicaten = int(predicateAct[predicaten])
	if int(predicateChk[predicaten]) == predicatetoken { /* valid shift */
		predicatercvr.char = -1
		predicatetoken = -1
		predicateVAL = predicatercvr.lval
		predicatestate = predicaten
		if Errflag > 0 {
			Errflag--
		}
		goto predicatestack
	}

predicatedefault:
	/* default state action */
	predicaten = int(predicateDef[predicatestate])
	if predicaten == -2 {
		if predicatercvr.char < 0 {
			predicatercvr.char, predicatetoken = predicatelex1(predicatelex, &predicatercvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if predicateExca[xi+0] == -1 && int(predicateExca[xi+1]) == predicatestate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			predicaten = int(predicateExca[xi+0])
			if predicaten < 0 || predicaten == predicatetoken {
				break
			}
		}
		predicaten = int(predicateExca[xi+1])
		if predicaten < 0 {
			goto ret0
		}
	}
	if predicaten == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			predicatelex.Error(predicateErrorMessage(predicatestate, predicatetoken))
			Nerrs++
			if predicateDebug >= 1 {
				__yyfmt__.Printf("%s", predicateStatname(predicatestate))
				__yyfmt__.Printf(" saw %s\n", predicateTokname(predicatetoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for predicatep >= 0 {
				predicaten = int(predicatePact[predicateS[predicatep].yys]) + predicateErrCode
				if predicaten >= 0 && predicaten < predicateLast {
					predicatestate = int(predicateAct[predicaten]) /* simulate a shift of "error" */
					if int(predicateChk[predicatestate]) == predicateErrCode {
						goto predicatestack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if predicateDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", predicateS[predicatep].yys)
				}
				predicatep--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if predicateDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", predicateTokname(predicatetoken))
			}
			if predicatetoken == predicateEofCode {
				goto ret1
			}
			predicatercvr.char = -1
			predicatetoken = -1
			goto predicatenewstate /* try again in the same state */
		}
	}

	/* reduction by production predicaten */
	if predicateDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", predicaten, predicateStatname(predicatestate))
	}

	predicatent := predicaten
	predicatept := predicatep
	_ = predicatept // guard against "declared and not used"

	predicatep -= int(predicateR2[predicaten])
	// predicatep is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if predicatep+1 >= len(predicateS) {
		nyys := make([]predicateSymType, len(predicateS)*2)
		copy(nyys, predicateS)
		predicateS = nyys
	}
	predicateVAL = predicateS[predicatep+1]

	/* consult goto table to find next state */
	predicaten = int(predicateR1[predicaten])
	predicateg := int(predicatePgo[predicaten])
	predicatej := predicateg + predicateS[predicatep].yys + 1

	if predicatej >= predicateLast {
		predicatestate = int(predicateAct[predicateg])
	} else {
		predicatestate = int(predicateAct[predicatej])
		if int(predicateChk[predicatestate]) != -predicaten {
			predicatestate = int(predicateAct[predicateg])
		}
	}
	// dummy call; replaced with literal code
	switch predicatent {

	case 1:
		predicateDollar = predicateS[predicatept-2 : predicatept+1]
//line predicate.y:31
		{
			*predicateVAL.predicate = predicateDollar[1].expr
		}
	case 2:
		predicateDollar = predicateS[predicatept-1 : predicatept+1]
//line predicate.y:37
		{
			predicateVAL.expr = predicateDollar[1].expr
		}
	case 3:
		predicateDollar = predicateS[predicatept-3 : predicatept+1]
//line predicate.y:41
		{
			predicateVAL.expr = predicateDollar[1].expr + " " + toConnector(predicateDollar[2].operator) + " " + predicateDollar[3].expr
		}
	case 4:
		predicateDollar = predicateS[predicatept-3 : predicatept+1]
//line predicate.y:47
		{
			predicateVAL.expr = makeLHS(predicateDollar[1].fields) + " " + predicateDollar[2].operator + " " + predicateDollar[3].lit
		}
	case 5:
		predicateDollar = predicateS[predicatept-4 : predicatept+1]
//line predicate.y:51
		{
			predicateVAL.expr = makeLHS(predicateDollar[1].fields) + " is " + predicateDollar[4].lit
		}
	case 6:
		predicateDollar = predicateS[predicatept-4 : predicatept+1]
//line predicate.y:55
		{
			predicateVAL.expr = makeLHS(predicateDollar[1].fields) + " is not " + predicateDollar[4].lit
		}
	case 7:
		predicateDollar = predicateS[predicatept-3 : predicatept+1]
//line predicate.y:59
		{
			predicateVAL.expr = makeLHS(predicateDollar[1].fields) + " like concat('%', " + predicateDollar[3].lit + ", '%')"
		}
	case 10:
		predicateDollar = predicateS[predicatept-2 : predicatept+1]
//line predicate.y:67
		{
			predicateVAL.operator = predicateDollar[1].operator + predicateDollar[2].operator
		}
	case 11:
		predicateDollar = predicateS[predicatept-2 : predicatept+1]
//line predicate.y:71
		{
			predicateVAL.operator = predicateDollar[1].operator + predicateDollar[2].operator
		}
	case 12:
		predicateDollar = predicateS[predicatept-2 : predicatept+1]
//line predicate.y:75
		{
			predicateVAL.operator = predicateDollar[1].operator
		}
	case 13:
		predicateDollar = predicateS[predicatept-2 : predicatept+1]
//line predicate.y:79
		{
			predicateVAL.operator = predicateDollar[1].operator + predicateDollar[2].operator
		}
	case 14:
		predicateDollar = predicateS[predicatept-2 : predicatept+1]
//line predicate.y:85
		{
			predicateVAL.operator = predicateDollar[1].operator + predicateDollar[2].operator
		}
	case 15:
		predicateDollar = predicateS[predicatept-2 : predicatept+1]
//line predicate.y:89
		{
			predicateVAL.operator = predicateDollar[1].operator + predicateDollar[2].operator
		}
	case 20:
		predicateDollar = predicateS[predicatept-2 : predicatept+1]
//line predicate.y:101
		{
			predicateVAL.lit = predicateDollar[1].operator + predicateDollar[2].lit
		}
	case 22:
		predicateDollar = predicateS[predicatept-4 : predicatept+1]
//line predicate.y:108
		{
			predicateVAL.lit = predicateDollar[1].operator + predicateDollar[2].lit + "." + predicateDollar[4].lit
		}
	case 23:
		predicateDollar = predicateS[predicatept-3 : predicatept+1]
//line predicate.y:112
		{
			predicateVAL.lit = predicateDollar[1].lit + "." + predicateDollar[3].lit
		}
	case 24:
		predicateDollar = predicateS[predicatept-3 : predicatept+1]
//line predicate.y:118
		{
			predicateVAL.fields = append(predicateDollar[1].fields, predicateDollar[3].ident)
		}
	case 25:
		predicateDollar = predicateS[predicatept-3 : predicatept+1]
//line predicate.y:122
		{
			predicateVAL.fields = append(predicateDollar[1].fields, predicateDollar[3].lit)
		}
	case 26:
		predicateDollar = predicateS[predicatept-1 : predicatept+1]
//line predicate.y:126
		{
			predicateVAL.fields = append(predicateVAL.fields, predicateDollar[1].ident)
		}
	}
	goto predicatestack /* stack new state and value */
}
